#checkId($entity)
#parse("include/init_var_global.vm")
#parse("include/init_var_entity.vm")
#parse("include/java_header.vm")

package ${target.javaPackageFromFolder($SRC)};
##--------------------------------------------------------------------------------------------------------
##--------------------------------------------------------------------------------------------------------
## #set( $className    = "${entity.name}EntityRec" )
## #set( $keyClassName = "${entity.name}EntityKey" )
##--------------------------------------------------------------------------------------------------------
## IF COMPOSITE PRIMARY KEY : GENERATE A JAVA CLASS FOR THIS COMPOSITE KEY
#if ( $entity.hasCompositePrimaryKey() )
## // This Bean has a composite Primary Key  
$generator.generate($target.entityName ,  "${jpaRecordKeyClass}.java", $target.folder, "XxxJpaRecordKey_java.vm"  )
#else 
## // This Bean has a basic Primary Key (not composite) 
#end
##--- @Transient usage count ( number of xxxToMany links ) 
#*
#set ( $TRANSIENT_COUNT = 0 )
#foreach( $link in $entity.selectedLinks )
#if ( $link.isCardinalityManyToMany() || $link.isCardinalityOneToMany() )
#set ( $TRANSIENT_COUNT = $TRANSIENT_COUNT + 1 )
#end
#end
*#
import java.io.Serializable;

#foreach( $import in $java.imports($entity.attributes) )
import $import;
#end

#foreach( $import in $jpa.imports($entity) )
import $import;
#end

/**
 * Persistent class for "${entity.name}" entity stored in table "${entity.databaseTable}" <br>
 * This class is a "record entity" without JPA links  <br>
 *
 * @author $AUTHOR
 *
 */
##--- JPQL PK WHERE CLAUSE
#set( $whereClause = "" )
#set( $compositePK = "" )
#if ( $entity.hasCompositePrimaryKey() )
#set( $compositePK = "compositePrimaryKey." )
#end
#foreach( $field in $entity.keyAttributes )
#if($foreach.count > 1)
#set( $whereClause = "${whereClause} AND " )
#end
#set( $whereClause = "${whereClause}x.${compositePK}${field.name} = ?${foreach.count} " )
#end
$jpa.entityAnnotations(0, $entity)
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="${jpaRecordClass}.countAll",  query="SELECT COUNT(x) FROM ${jpaRecordClass} x" ),
  @NamedQuery ( name="${jpaRecordClass}.countById", query="SELECT COUNT(x) FROM ${jpaRecordClass} x WHERE ${whereClause}" )
} )
public class ${jpaRecordClass} implements Serializable {

    private static final long serialVersionUID = 1L;

#if ( $entity.hasCompositePrimaryKey() )
    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( EMBEDDED IN AN EXTERNAL CLASS )  
    //----------------------------------------------------------------------
	@EmbeddedId
    private ${jpaRecordKeyClass} compositePrimaryKey ;

#else 
    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
#foreach( $field in $entity.keyAttributes )
$jpa.fieldAnnotations(4, $field)
    private $field.formattedType(10) $field.formattedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end; #if($field.isFK())// Foreign Key #end 
#end

#end

    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
#foreach( $field in $entity.nonKeyAttributes )
## #if ( $field.isUsedInLinkJoinColumn( $entity.selectedLinks ) != true )
## $field.jpaAnnotations(4)
##     private $field.formattedType(10) $field.formattedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end;
##     
## #else
##     // "$field.name" (column "$field.databaseName") is not mapped as an attribute because it is used in a link   
##     
## #end
$jpa.fieldAnnotations(4, $field)
    private $field.formattedType(10) $field.formattedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end; #if($field.isFK())// Foreign Key #end 


#end

    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public ${jpaRecordClass}() {
		super();
#if ( $entity.hasCompositePrimaryKey() )        
		this.compositePrimaryKey = new ${jpaRecordKeyClass}();       
#end
    }
    
#if ( $entity.hasCompositePrimaryKey() )
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE COMPOSITE KEY 
    //----------------------------------------------------------------------
#foreach( $field in $entity.keyAttributes )
#if ( $field.setter )    public void ${field.setter}( $field.type $field.name ) {
        this.compositePrimaryKey.${field.setter}( $field.name ) ;
    }
#end
#if ( $field.getter )    public $field.type ${field.getter}() {
        return this.compositePrimaryKey.${field.getter}() ;
    }
#end
#end

#else 
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
#foreach( $field in $entity.keyAttributes )
#if ( $field.setter )    public void ${field.setter}( $field.type $field.name ) {
        this.$field.name = $field.name ;
    }
#end
#if ( $field.getter )    public $field.type ${field.getter}() {
        return this.$field.name;
    }
#end
#end
#end

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
#foreach( $field in $entity.nonKeyAttributes )
#if ( $field.databaseName )    //--- DATABASE MAPPING : $field.databaseName ( $field.databaseType ) 
#end
#if ( $field.setter )    public void ${field.setter}( $field.type $field.name ) {
        this.$field.name = $field.name;
    }
#end
#if ( $field.getter )    public $field.type ${field.getter}() {
        return this.$field.name;
    }
#end

#end  

    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
$java.toStringMethod($entity, $entity.nonKeyAttributes, "compositePrimaryKey", 4)
}
